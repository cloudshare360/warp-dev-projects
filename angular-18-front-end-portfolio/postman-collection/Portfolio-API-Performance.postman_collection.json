{
  "info": {
    "name": "Portfolio API - Performance & Load Tests",
    "description": "Performance testing and load testing collection for Portfolio API endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "auth": {
    "type": "noauth"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string",
      "description": "Base URL for the Express API"
    },
    {
      "key": "iterationCount",
      "value": "10",
      "type": "string",
      "description": "Number of iterations for performance tests"
    },
    {
      "key": "responseTimeThreshold",
      "value": "500",
      "type": "string", 
      "description": "Response time threshold in milliseconds"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set start time for performance measurement",
          "pm.collectionVariables.set('testStartTime', Date.now());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Performance metrics tracking",
          "const responseTime = pm.response.responseTime;",
          "const threshold = parseInt(pm.collectionVariables.get('responseTimeThreshold'));",
          "",
          "pm.test(`Response time is less than ${threshold}ms`, function () {",
          "    pm.expect(responseTime).to.be.below(threshold);",
          "});",
          "",
          "// Track response times for analysis",
          "if (!pm.collectionVariables.get('responseTimes')) {",
          "    pm.collectionVariables.set('responseTimes', JSON.stringify([]));",
          "}",
          "",
          "const responseTimes = JSON.parse(pm.collectionVariables.get('responseTimes'));",
          "responseTimes.push({",
          "    endpoint: pm.request.url.toString(),",
          "    responseTime: responseTime,",
          "    timestamp: Date.now()",
          "});",
          "pm.collectionVariables.set('responseTimes', JSON.stringify(responseTimes));"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Load Test - Health Endpoints",
      "description": "Load testing for health check endpoints",
      "item": [
        {
          "name": "Load Test - Basic Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Load test for basic health check endpoint"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health check responds successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(100);",
                  "});",
                  "",
                  "pm.test('Health check returns proper JSON', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('OK');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Load Test - Detailed Health Check",
          "request": {
            "method": "GET", 
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health/detailed",
              "host": ["{{baseUrl}}"],
              "path": ["health", "detailed"]
            },
            "description": "Load test for detailed health check endpoint"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Detailed health check responds successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Detailed health check response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});",
                  "",
                  "pm.test('Detailed health has system metrics', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.system).to.exist;",
                  "    pm.expect(response.dependencies).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Performance Test - API Endpoints",
      "description": "Performance testing for main API endpoints",
      "item": [
        {
          "name": "Performance Test - Get Profile",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "profile"]
            },
            "description": "Performance test for profile endpoint"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Profile endpoint responds successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile response time is good', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(300);",
                  "});",
                  "",
                  "pm.test('Profile data is complete', function () {",
                  "    const profile = pm.response.json();",
                  "    pm.expect(profile.name).to.exist;",
                  "    pm.expect(profile.email).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Performance Test - Get All Experience",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/experience",
              "host": ["{{baseUrl}}"],
              "path": ["api", "experience"]
            },
            "description": "Performance test for experience list endpoint"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Experience endpoint responds successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Experience response time is good', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(400);",
                  "});",
                  "",
                  "pm.test('Experience data is array', function () {",
                  "    const experience = pm.response.json();",
                  "    pm.expect(experience).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Performance Test - Get All Projects",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/projects",
              "host": ["{{baseUrl}}"],
              "path": ["api", "projects"]
            },
            "description": "Performance test for projects list endpoint"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Projects endpoint responds successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Projects response time is good', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(400);",
                  "});",
                  "",
                  "pm.test('Projects data is array', function () {",
                  "    const projects = pm.response.json();",
                  "    pm.expect(projects).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Performance Test - Get All Skills",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/skills",
              "host": ["{{baseUrl}}"],
              "path": ["api", "skills"]
            },
            "description": "Performance test for skills endpoint"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Skills endpoint responds successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Skills response time is good', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(300);",
                  "});",
                  "",
                  "pm.test('Skills data is array', function () {",
                  "    const skills = pm.response.json();",
                  "    pm.expect(skills).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Stress Test - Rate Limiting",
      "description": "Testing rate limiting behavior under stress",
      "item": [
        {
          "name": "Rate Limit Test - Rapid Requests",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Test rate limiting with rapid consecutive requests"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Track rate limit headers if available",
                  "if (pm.response.headers.has('X-RateLimit-Limit')) {",
                  "    const limit = pm.response.headers.get('X-RateLimit-Limit');",
                  "    const remaining = pm.response.headers.get('X-RateLimit-Remaining');",
                  "    const reset = pm.response.headers.get('X-RateLimit-Reset');",
                  "    ",
                  "    console.log(`Rate Limit: ${limit}, Remaining: ${remaining}, Reset: ${reset}`);",
                  "}",
                  "",
                  "// Accept both success and rate limit responses",
                  "pm.test('Request handled appropriately', function () {",
                  "    pm.expect([200, 429]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 429) {",
                  "    pm.test('Rate limit response has proper structure', function () {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.error).to.exist;",
                  "        pm.expect(response.error.message).to.include('rate limit');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Memory and Resource Tests",
      "description": "Testing memory usage and resource consumption",
      "item": [
        {
          "name": "Memory Test - Large Data Request",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/projects?_limit=1000",
              "host": ["{{baseUrl}}"],
              "path": ["api", "projects"],
              "query": [
                {
                  "key": "_limit",
                  "value": "1000"
                }
              ]
            },
            "description": "Test handling of large data requests"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Large data request succeeds', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Large data response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Response has pagination headers', function () {",
                  "    if (pm.response.headers.has('x-total-count')) {",
                  "        pm.expect(pm.response.headers.get('x-total-count')).to.exist;",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Resource Test - Concurrent Health Checks",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health/detailed",
              "host": ["{{baseUrl}}"],
              "path": ["health", "detailed"]
            },
            "description": "Test system resource reporting under load"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('System health check succeeds', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "",
                  "if (response.system && response.system.memory) {",
                  "    pm.test('Memory usage is reported', function () {",
                  "        pm.expect(response.system.memory.used).to.be.a('number');",
                  "        pm.expect(response.system.memory.free).to.be.a('number');",
                  "    });",
                  "    ",
                  "    // Log memory usage for monitoring",
                  "    console.log(`Memory Usage - Used: ${response.system.memory.used}MB, Free: ${response.system.memory.free}MB`);",
                  "}",
                  "",
                  "if (response.system && response.system.cpu) {",
                  "    pm.test('CPU usage is reported', function () {",
                  "        pm.expect(response.system.cpu.usage).to.be.a('number');",
                  "    });",
                  "    ",
                  "    console.log(`CPU Usage: ${response.system.cpu.usage}%`);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ]
}