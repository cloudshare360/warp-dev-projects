{
  "info": {
    "name": "Portfolio API - Main Collection",
    "description": "Comprehensive API testing collection for the Portfolio Website REST API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "auth": {
    "type": "noauth"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string",
      "description": "Base URL for the Express API"
    },
    {
      "key": "jsonServerUrl",
      "value": "http://localhost:3000",
      "type": "string",
      "description": "Base URL for JSON Server"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set timestamp for requests",
          "pm.collectionVariables.set('timestamp', new Date().toISOString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test to check response time",
          "pm.test('Response time is less than 2000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "// Global test to check status code is not 5xx",
          "pm.test('No server errors', function () {",
          "    pm.expect(pm.response.code).to.be.below(500);",
          "});"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Health Checks",
      "description": "API health and status endpoints",
      "item": [
        {
          "name": "Basic Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Basic health check endpoint"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has status OK', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('OK');",
                  "});",
                  "",
                  "pm.test('Response has timestamp', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.timestamp).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Detailed Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health/detailed",
              "host": ["{{baseUrl}}"],
              "path": ["health", "detailed"]
            },
            "description": "Detailed health check with system metrics"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has system info', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.system).to.exist;",
                  "    pm.expect(response.system.memory).to.exist;",
                  "    pm.expect(response.system.cpu).to.exist;",
                  "});",
                  "",
                  "pm.test('Response has dependencies', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.dependencies).to.exist;",
                  "    pm.expect(response.dependencies.jsonServer).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Readiness Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health/ready",
              "host": ["{{baseUrl}}"],
              "path": ["health", "ready"]
            },
            "description": "Kubernetes/Docker readiness probe endpoint"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Service is ready', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.ready).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Liveness Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health/live",
              "host": ["{{baseUrl}}"],
              "path": ["health", "live"]
            },
            "description": "Kubernetes/Docker liveness probe endpoint"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Service is alive', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.alive).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Profile API",
      "description": "Profile information endpoints",
      "item": [
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "profile"]
            },
            "description": "Get complete profile information"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile has required fields', function () {",
                  "    const profile = pm.response.json();",
                  "    pm.expect(profile.id).to.exist;",
                  "    pm.expect(profile.name).to.exist;",
                  "    pm.expect(profile.title).to.exist;",
                  "    pm.expect(profile.email).to.exist;",
                  "});",
                  "",
                  "pm.test('Profile email is valid', function () {",
                  "    const profile = pm.response.json();",
                  "    pm.expect(profile.email).to.match(/^[^@]+@[^@]+\\.[^@]+$/);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Name\",\n  \"title\": \"Updated Title\",\n  \"summary\": \"Updated professional summary\",\n  \"location\": \"Updated Location\",\n  \"email\": \"updated@example.com\",\n  \"phone\": \"+1-234-567-8900\",\n  \"website\": \"https://updated-portfolio.com\",\n  \"linkedin\": \"https://linkedin.com/in/updated-profile\",\n  \"github\": \"https://github.com/updated-user\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "profile"]
            },
            "description": "Update profile information"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.name).to.eql('Updated Name');",
                  "    pm.expect(response.title).to.eql('Updated Title');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Experience API",
      "description": "Work experience endpoints",
      "item": [
        {
          "name": "Get All Experience",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/experience",
              "host": ["{{baseUrl}}"],
              "path": ["api", "experience"]
            },
            "description": "Get all work experience entries"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const experience = pm.response.json();",
                  "    pm.expect(experience).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Experience entries have required fields', function () {",
                  "    const experience = pm.response.json();",
                  "    if (experience.length > 0) {",
                  "        pm.expect(experience[0].id).to.exist;",
                  "        pm.expect(experience[0].company).to.exist;",
                  "        pm.expect(experience[0].position).to.exist;",
                  "        pm.expect(experience[0].startDate).to.exist;",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Experience by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/experience/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "experience", "1"]
            },
            "description": "Get specific experience entry by ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Experience has correct ID', function () {",
                  "    const experience = pm.response.json();",
                  "    pm.expect(experience.id).to.eql('1');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Experience Entry",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"company\": \"New Company Ltd\",\n  \"position\": \"Senior Developer\",\n  \"location\": \"Remote\",\n  \"startDate\": \"2024-01-01\",\n  \"endDate\": null,\n  \"current\": true,\n  \"description\": \"Working on exciting new projects with modern technologies\",\n  \"achievements\": [\n    \"Led development of new product features\",\n    \"Improved system performance by 30%\"\n  ],\n  \"technologies\": [\"React\", \"Node.js\", \"MongoDB\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/experience",
              "host": ["{{baseUrl}}"],
              "path": ["api", "experience"]
            },
            "description": "Create new experience entry"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Experience created successfully', function () {",
                  "    const experience = pm.response.json();",
                  "    pm.expect(experience.company).to.eql('New Company Ltd');",
                  "    pm.expect(experience.current).to.be.true;",
                  "});",
                  "",
                  "// Store the created ID for cleanup",
                  "const response = pm.response.json();",
                  "pm.collectionVariables.set('createdExperienceId', response.id);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Skills API",
      "description": "Skills and competencies endpoints",
      "item": [
        {
          "name": "Get All Skills",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/skills",
              "host": ["{{baseUrl}}"],
              "path": ["api", "skills"]
            },
            "description": "Get all skills organized by categories"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Skills have categories', function () {",
                  "    const skills = pm.response.json();",
                  "    pm.expect(skills).to.be.an('array');",
                  "    if (skills.length > 0) {",
                  "        pm.expect(skills[0].category).to.exist;",
                  "        pm.expect(skills[0].skills).to.be.an('array');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Skills by Category",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/skills?category=Technical",
              "host": ["{{baseUrl}}"],
              "path": ["api", "skills"],
              "query": [
                {
                  "key": "category",
                  "value": "Technical"
                }
              ]
            },
            "description": "Get skills filtered by category"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Filtered skills match category', function () {",
                  "    const skills = pm.response.json();",
                  "    skills.forEach(skillGroup => {",
                  "        pm.expect(skillGroup.category).to.include('Technical');",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Projects API",
      "description": "Portfolio projects endpoints",
      "item": [
        {
          "name": "Get All Projects",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/projects",
              "host": ["{{baseUrl}}"],
              "path": ["api", "projects"]
            },
            "description": "Get all portfolio projects"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Projects have required fields', function () {",
                  "    const projects = pm.response.json();",
                  "    pm.expect(projects).to.be.an('array');",
                  "    if (projects.length > 0) {",
                  "        pm.expect(projects[0].id).to.exist;",
                  "        pm.expect(projects[0].title).to.exist;",
                  "        pm.expect(projects[0].description).to.exist;",
                  "        pm.expect(projects[0].technologies).to.be.an('array');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Projects with Pagination",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/projects?_page=1&_limit=3",
              "host": ["{{baseUrl}}"],
              "path": ["api", "projects"],
              "query": [
                {
                  "key": "_page",
                  "value": "1"
                },
                {
                  "key": "_limit",
                  "value": "3"
                }
              ]
            },
            "description": "Get projects with pagination"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Pagination headers exist', function () {",
                  "    pm.expect(pm.response.headers.has('x-total-count')).to.be.true;",
                  "});",
                  "",
                  "pm.test('Limited results returned', function () {",
                  "    const projects = pm.response.json();",
                  "    pm.expect(projects.length).to.be.at.most(3);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Featured Projects",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/projects?featured=true",
              "host": ["{{baseUrl}}"],
              "path": ["api", "projects"],
              "query": [
                {
                  "key": "featured",
                  "value": "true"
                }
              ]
            },
            "description": "Get only featured projects"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All projects are featured', function () {",
                  "    const projects = pm.response.json();",
                  "    projects.forEach(project => {",
                  "        pm.expect(project.featured).to.be.true;",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Education API",
      "description": "Education and certification endpoints",
      "item": [
        {
          "name": "Get All Education",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/education",
              "host": ["{{baseUrl}}"],
              "path": ["api", "education"]
            },
            "description": "Get all education entries"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Education entries have required fields', function () {",
                  "    const education = pm.response.json();",
                  "    pm.expect(education).to.be.an('array');",
                  "    if (education.length > 0) {",
                  "        pm.expect(education[0].institution).to.exist;",
                  "        pm.expect(education[0].degree).to.exist;",
                  "        pm.expect(education[0].startDate).to.exist;",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get All Certifications",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/certifications",
              "host": ["{{baseUrl}}"],
              "path": ["api", "certifications"]
            },
            "description": "Get all certification entries"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Certifications have required fields', function () {",
                  "    const certifications = pm.response.json();",
                  "    pm.expect(certifications).to.be.an('array');",
                  "    if (certifications.length > 0) {",
                  "        pm.expect(certifications[0].name).to.exist;",
                  "        pm.expect(certifications[0].issuer).to.exist;",
                  "        pm.expect(certifications[0].issueDate).to.exist;",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Contact API",
      "description": "Contact information and messaging endpoints",
      "item": [
        {
          "name": "Get Contact Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/contact",
              "host": ["{{baseUrl}}"],
              "path": ["api", "contact"]
            },
            "description": "Get contact information and social links"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Contact info has required fields', function () {",
                  "    const contact = pm.response.json();",
                  "    pm.expect(contact.email).to.exist;",
                  "    pm.expect(contact.social).to.exist;",
                  "    pm.expect(contact.social).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Submit Contact Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"subject\": \"Inquiry about your work\",\n  \"message\": \"Hi, I'm interested in discussing a potential collaboration. Could we schedule a call?\",\n  \"phone\": \"+1-555-123-4567\",\n  \"company\": \"Tech Solutions Inc\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/contact/message",
              "host": ["{{baseUrl}}"],
              "path": ["api", "contact", "message"]
            },
            "description": "Submit a contact form message"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Message submitted successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('success');",
                  "    pm.expect(response.message).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Testimonials API",
      "description": "Client testimonials and reviews endpoints",
      "item": [
        {
          "name": "Get All Testimonials",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/testimonials",
              "host": ["{{baseUrl}}"],
              "path": ["api", "testimonials"]
            },
            "description": "Get all client testimonials"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Testimonials have required fields', function () {",
                  "    const testimonials = pm.response.json();",
                  "    pm.expect(testimonials).to.be.an('array');",
                  "    if (testimonials.length > 0) {",
                  "        pm.expect(testimonials[0].name).to.exist;",
                  "        pm.expect(testimonials[0].content).to.exist;",
                  "        pm.expect(testimonials[0].rating).to.exist;",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Featured Testimonials",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/testimonials?featured=true",
              "host": ["{{baseUrl}}"],
              "path": ["api", "testimonials"],
              "query": [
                {
                  "key": "featured",
                  "value": "true"
                }
              ]
            },
            "description": "Get only featured testimonials"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All testimonials are featured', function () {",
                  "    const testimonials = pm.response.json();",
                  "    testimonials.forEach(testimonial => {",
                  "        pm.expect(testimonial.featured).to.be.true;",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ]
}